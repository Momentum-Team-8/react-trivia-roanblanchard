{"ast":null,"code":"var _jsxFileName = \"/Users/roanblanchard/momentum-assignments/react-trivia-roanblanchard/trivia/src/components/AnswerChoices.js\";\nimport React, { useMemo } from 'react';\nimport shuffle from 'lodash';\nimport he from 'he';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AnswerChoices = ({\n  answers,\n  setAnswered,\n  checkAnswer,\n  commitAnswer\n}) => {\n  const {\n    correctAnswer,\n    incorrectAnswers\n  } = answers;\n  const allAnswers = [correctAnswer, ...incorrectAnswers];\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  const handleClick = answer => {\n    setAnswered(true);\n    console.log(answer);\n    checkAnswer(he.decode(correctAnswer) === answer);\n    commitAnswer();\n  };\n\n  return shuffle(allAnswers).map(item => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"answer\",\n      onClick: () => {\n        handleClick(he.decode(item));\n      },\n      children: he.decode(item)\n    }, item, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  });\n};\n_c = AnswerChoices;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerChoices\");","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/react-trivia-roanblanchard/trivia/src/components/AnswerChoices.js"],"names":["React","useMemo","shuffle","he","AnswerChoices","answers","setAnswered","checkAnswer","commitAnswer","correctAnswer","incorrectAnswers","allAnswers","array","currentIndex","length","randomIndex","Math","floor","random","handleClick","answer","console","log","decode","map","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,QAApB;AACA,OAAOC,EAAP,MAAe,IAAf;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,WAAX;AAAwBC,EAAAA,WAAxB;AAAqCC,EAAAA;AAArC,CAAD,KAAyD;AACpF,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAsCL,OAA5C;AAGF,QAAMM,UAAU,GAAG,CAACF,aAAD,EAAgB,GAAGC,gBAAnB,CAAnB;;AAGA,WAASR,OAAT,CAAiBU,KAAjB,EAAwB;AACpB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QAAkCC,WAAlC,CADoB,CAGpB;;AACA,WAAO,MAAMF,YAAb,EAA2B;AAEzB;AACAE,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,MAAAA,YAAY,GAJa,CAMzB;;AACA,OAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EACtBH,KAAK,CAACC,YAAD,CADiB,CAA5C;AAED;;AAED,WAAOD,KAAP;AACD;;AAED,QAAMO,WAAW,GAAIC,MAAD,IAAY;AAC9Bd,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAb,IAAAA,WAAW,CAACJ,EAAE,CAACoB,MAAH,CAAUd,aAAV,MAA6BW,MAA9B,CAAX;AACAZ,IAAAA,YAAY;AACb,GALD;;AAMA,SAAON,OAAO,CAACS,UAAD,CAAP,CAAoBa,GAApB,CAAyBC,IAAD,IAAU;AACvC,wBACE;AAEE,MAAA,KAAK,EAAC,QAFR;AAGE,MAAA,OAAO,EAAE,MAAM;AACbN,QAAAA,WAAW,CAAChB,EAAE,CAACoB,MAAH,CAAUE,IAAV,CAAD,CAAX;AACD,OALH;AAAA,gBAOGtB,EAAE,CAACoB,MAAH,CAAUE,IAAV;AAPH,OACOA,IADP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAZM,CAAP;AAaD,CA5CM;KAAMrB,a","sourcesContent":["import React, { useMemo } from 'react'\nimport shuffle from 'lodash'\nimport he from 'he'\n\nexport const AnswerChoices = ({ answers, setAnswered, checkAnswer, commitAnswer }) => {\n  const { correctAnswer, incorrectAnswers } = answers\n\n\nconst allAnswers = [correctAnswer, ...incorrectAnswers]\n\n\nfunction shuffle(array) {\n    let currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n  const handleClick = (answer) => {\n    setAnswered(true)\n    console.log(answer)\n    checkAnswer(he.decode(correctAnswer) === answer)\n    commitAnswer()\n  };\n  return shuffle(allAnswers).map((item) => {\n    return (\n      <button\n        key={item}\n        class='answer'\n        onClick={() => {\n          handleClick(he.decode(item))\n        }}\n      >\n        {he.decode(item)}\n      </button>\n    )\n  })\n}"]},"metadata":{},"sourceType":"module"}