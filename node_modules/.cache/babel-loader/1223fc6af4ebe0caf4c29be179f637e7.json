{"ast":null,"code":"var _jsxFileName = \"/Users/roanblanchard/momentum-assignments/react-trivia-roanblanchard/trivia/src/components/CategoryQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getCategoryQuestions } from '../api';\nimport { CategoryList } from './CategoryList';\nimport he from 'he';\nimport { AnswerChoices } from \"./AnswerChoices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CategoryQuestions = props => {\n  _s();\n\n  const [questions, setQuestions] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [answered, setAnswered] = useState(false);\n  const [correct, setCorrect] = useState(false);\n  const {\n    selectedCategory,\n    categories,\n    setSelectedCategory\n  } = props;\n  useEffect(() => {\n    getCategoryQuestions(selectedCategory).then(data => {\n      setQuestions(data);\n      setLoading(false);\n    });\n  }, [selectedCategory]);\n\n  const commitAnswer = () => {\n    if (correct) {\n      console.log('correct');\n    } else {\n      console.log('incorrect');\n      setAnswered(false);\n    }\n  };\n\n  return loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Trivia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"'loading questions...'\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: () => setSelectedCategory(null),\n      children: \"React Trivia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"go-back\",\n      onClick: () => setSelectedCategory(null),\n      children: \"\\u2190 Back to Category List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"cat-name\",\n      children: questions[0].category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), questions.map(data => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: he.decode(data.question)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(AnswerChoices, {\n              answers: {\n                correctAnswer: data.correct_answer,\n                incorrectAnswers: data.incorrect_answers\n              },\n              checkAnswer: setCorrect,\n              setAnswered: setAnswered,\n              commitAnswer: commitAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    })]\n  }, void 0, true);\n};\n\n_s(CategoryQuestions, \"5XPeJGNotfOFAFsrpSNt3wabC9s=\");\n\n_c = CategoryQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryQuestions\");","map":{"version":3,"sources":["/Users/roanblanchard/momentum-assignments/react-trivia-roanblanchard/trivia/src/components/CategoryQuestions.js"],"names":["React","useEffect","useState","getCategoryQuestions","CategoryList","he","AnswerChoices","CategoryQuestions","props","questions","setQuestions","loading","setLoading","answered","setAnswered","correct","setCorrect","selectedCategory","categories","setSelectedCategory","then","data","commitAnswer","console","log","category","map","decode","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AACxC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM;AAAEe,IAAAA,gBAAF;AAAoBC,IAAAA,UAApB;AAAgCC,IAAAA;AAAhC,MAAwDX,KAA9D;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,oBAAoB,CAACc,gBAAD,CAApB,CAAuCG,IAAvC,CAA4CC,IAAI,IAAI;AAChDX,MAAAA,YAAY,CAACW,IAAD,CAAZ;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHD;AAIH,GALQ,EAKN,CAACK,gBAAD,CALM,CAAT;;AAQA,QAAMK,YAAY,GAAG,MAAM;AACvB,QAAIP,OAAJ,EAAa;AACTQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAV,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,GAPD;;AAWA,SAAOH,OAAO,gBACN;AAAA,4BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAF,eACA;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAAA,kBADM,gBAIN;AAAA,4BACA;AAAI,MAAA,OAAO,EAAE,MAAMQ,mBAAmB,CAAC,IAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAE,MAAMA,mBAAmB,CAAC,IAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BV,SAAS,CAAC,CAAD,CAAT,CAAagB;AAAvC;AAAA;AAAA;AAAA;AAAA,YAHA,EAIChB,SAAS,CAACiB,GAAV,CAAeL,IAAD,IAAU;AACrB,0BACI;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCACI;AAAA,sBAAKhB,EAAE,CAACsB,MAAH,CAAUN,IAAI,CAACO,QAAf;AAAL;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,mCACI,QAAC,aAAD;AACI,cAAA,OAAO,EAAE;AACTC,gBAAAA,aAAa,EAAER,IAAI,CAACS,cADX;AAETC,gBAAAA,gBAAgB,EAAEV,IAAI,CAACW;AAFd,eADb;AAKI,cAAA,WAAW,EAAEhB,UALjB;AAMI,cAAA,WAAW,EAAEF,WANjB;AAOI,cAAA,YAAY,EAAEQ;AAPlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,uBADJ;AAkBH,KAnBA,CAJD;AAAA,kBAJR;AA+BH,CA1DM;;GAAMf,iB;;KAAAA,iB","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { getCategoryQuestions } from '../api'\nimport { CategoryList } from './CategoryList';\nimport he from 'he'\nimport { AnswerChoices } from \"./AnswerChoices\"\n\nexport const CategoryQuestions = (props) => {\n    const [questions, setQuestions] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [answered, setAnswered] = useState(false)\n    const [correct, setCorrect] = useState(false)\n\n    const { selectedCategory, categories, setSelectedCategory } = props\n\n    useEffect(() => {\n        getCategoryQuestions(selectedCategory).then(data => {\n            setQuestions(data)\n            setLoading(false)\n        })\n    }, [selectedCategory])\n    \n\n    const commitAnswer = () => {\n        if (correct) {\n            console.log('correct')\n        } else {\n            console.log('incorrect')\n            setAnswered(false)\n        }\n    }\n\n    \n\n    return loading\n        ?   <><h1>React Trivia</h1>\n            <p className=\"loading\">'loading questions...'</p></>\n        : (\n            <>\n            <h1 onClick={() => setSelectedCategory(null)}>React Trivia</h1>\n            <button className='go-back' onClick={() => setSelectedCategory(null)}>‚Üê Back to Category List</button>\n            <h2 className=\"cat-name\">{questions[0].category}</h2>\n            {questions.map((data) => {\n                return (\n                    <>\n                    <div className=\"question\">\n                        <h2>{he.decode(data.question)}</h2>\n                        <div>\n                            <AnswerChoices\n                                answers={{\n                                correctAnswer: data.correct_answer,\n                                incorrectAnswers: data.incorrect_answers,\n                                }}\n                                checkAnswer={setCorrect}\n                                setAnswered={setAnswered}\n                                commitAnswer={commitAnswer}\n                            />\n                        </div>\n                    </div>\n                    </>\n                )\n            })}\n            \n            </>\n        )\n}"]},"metadata":{},"sourceType":"module"}